<?php
/**
 * Its payment method base.
 *
 * @since: 21/09/2021
 * @author: Sarwar Hasan
 * @version 1.0.0
 * @package VitePos\Libs
 */

namespace VitePos\Libs;

use Matrix\Exception;
use VitePos\Modules\POS_Settings;

/**
 * Class Payment_Stripe_Method
 *
 * @package VitePos\Libs
 */
class Payment_Stripe_Method extends Payment_Method_Base {
	/**
	 * Its property secret_key
	 *
	 * @var string
	 */
	protected $secret_key = '';
	/**
	 * Its property script_added
	 *
	 * @var bool
	 */
	public static $script_added = false;
	/**
	 * Its property prefetch_added
	 *
	 * @var bool
	 */
	public static $prefetch_added = false;
	/**
	 * The initialize is generated by appsbd
	 *
	 * @return mixed|void
	 */
	public function initialize() {
		$this->set_admin_name( 'stripe' );

		$this->title = 'Stripe';
		$this->icon  = 'vps vps vps-cc-stripe';
		$this->id    = 'T';
		$this->comp  = 'stripe';
		$this->set_next_handler( 'SCP', 'StripeCardPayment' );
		add_filter( 'vitepos/filter/header-links', array( $this, 'prefetch_script' ), 11 );
		add_filter( 'vitepos/filter/footer-scripts', array( $this, 'footer_script' ), 9 );
		$this->offline = false;
	}


	/**
	 * The load data is generated by appsbd
	 */
	public function load_data() {
		parent::load_data();
		$this->admin_data->settings = (array) $this->admin_data->settings;
		
		$settings = $this->admin_data->settings;
		if ( isset( $settings['secret_key'] ) ) {
			$this->secret_key = $settings['secret_key'];
			unset( $settings['secret_key'] );
		}

		$this->set_settings( $settings );
	}

	/**
	 * The cancel order is generated by appsbd
	 *
	 * @param \WC_Order $order Its order param.
	 */
	public function cancel_order( $order ) {
		if ( $order instanceof \WC_Order ) {
			$payment_list = $order->get_meta( '_vtp_payment_list' );
			$is_updated   = false;
			foreach ( $payment_list as &$payment_item ) {
				if ( 'T' == $payment_item['type'] || 'R' == $payment_item['type'] ) {
					if ( ! empty( $payment_item['intend_id'] ) ) {
						$this->process_cancel_intend( $payment_item );
						$is_updated = true;
						unset( $payment_item['intend_id'] );

					}
					foreach ( array( 'cm', 'client_secret', 'reader_id' ) as $key ) {
						if ( isset( $payment_item[ $key ] ) ) {
							$is_updated = true;
							unset( $payment_item[ $key ] );
						}
					}
				}
			}

			if ( $is_updated ) {
				$order->update_meta_data( '_vtp_payment_list', $payment_list );
				$order->save();
			}
		}
	}

	/**
	 * The process cancel intend is generated by appsbd
	 *
	 * @param mixed $payment_item Its payment item.
	 *
	 * @return bool
	 */
	public function process_cancel_intend( $payment_item ) {
		if ( ! empty( $payment_item['intend_id'] ) ) {
			$stripe_settings = $this->admin_data;
			if ( ! empty( $stripe_settings ) && ! empty( $stripe_settings->settings['secret_key'] ) ) {
					$stripe_secret_key = '' . $stripe_settings->settings['secret_key'];
				try {
					$stripe = new \Stripe\StripeClient( $stripe_secret_key );
					$resp   = $stripe->{'paymentIntents'}->cancel( $payment_item['intend_id'] );
					return true;
				} catch ( \Stripe\Exception\ApiErrorException $e ) {
					return false;
				} catch ( \Error $e ) {
					return false;
				} catch ( \Exception $e ) {
					return false;
				}
			}
			return false;
		}
	}

	/**
	 * The is enable is generated by appsbd
	 *
	 * @return bool
	 */
	public function is_enable() {
		if ( parent::is_enable() ) {
			if ( empty( $this->admin_data->settings['pub_key'] ) || empty( $this->admin_data->settings['secret_key'] ) ) {
				return false;
			}
			return true;
		}
		return false;
	}
	/**
	 * The prefetch script is generated by appsbd
	 *
	 * @param mixed $links Its links param.
	 *
	 * @return mixed
	 */
	public function prefetch_script( $links ) {
		
		if ( $this->is_enable() ) {
			if ( self::$prefetch_added ) {
				return $links;
			}
			$links[]              = array(
				'href' => 'https://js.stripe.com/v3/',
				'rel'  => 'preload',
				'as'   => 'script',
			);
			self::$prefetch_added = true;

		}
		return $links;
	}

	/**
	 * The footer script is generated by appsbd
	 *
	 * @param mixed $scripts Its scripts param.
	 *
	 * @return mixed
	 */
	public function footer_script( $scripts ) {
		if ( $this->is_enable() ) {
			if ( self::$script_added ) {
				return $scripts;
			}
			$scripts[]          = array(
				'src' => 'https://js.stripe.com/v3/',
			);
			self::$script_added = true;
		}
		return $scripts;
	}

	/**
	 * The process payment is generated by appsbd
	 *
	 * @param mixed     $params Its params param.
	 * @param string    $currency_code Its currency_code param.
	 * @param \WC_Order $order Its order param.
	 *
	 * @return mixed
	 */
	public function process_payment( $params, $currency_code, $order ) {
		$params->resp->status = true;
		$stripe_settings      = $this->admin_data;

		if ( $this->is_enable() ) {
			if ( empty( $params->payment_item['client_secret'] ) ) {
				$stripe_secret_key = '' . $stripe_settings->settings['secret_key'];
				\Stripe\Stripe::setApiKey( $stripe_secret_key );
				try {
					$param = array(
						'amount'         => $params->payment_item['amount'] * 100,
						'currency'       => $currency_code,
						'capture_method' => 'manual',
						'metadata'       => array(
							'order_id' => $order->get_id(),
							'from'     => 'Vitepos',
							'method'   => 'Stripe',
						),
					);
					if ( ! empty( $stripe_settings->settings['capture_method'] ) && 'P' == $stripe_settings->settings['capture_method'] ) {
						unset( $param ['capture_method'] );
					}
					$payment_intent                        = \Stripe\PaymentIntent::create( $param );
					$params->payment_item['intend_id']     = $payment_intent->id;
					$params->payment_item['cm']            = ! empty( $param['capture_method'] ) ? $param['capture_method'] : 'automatic';
					$params->payment_item['client_secret'] = $payment_intent->client_secret;
					$params->resp->next                    = 'SCP';
					$params->resp->payment_data            = array( 'client_secret' => $params->payment_item['client_secret'] );
					POS_Settings::get_module_instance()->add_info( 'Order requires payment process' );

					return $params;
				} catch ( \Stripe\Exception\ApiErrorException $e ) {
					POS_Settings::get_module_instance()->add_error( $e->getMessage() );
					$params->resp->is_delete = true;
				} catch ( Error $e ) {
					POS_Settings::get_module_instance()->add_error( $e->getMessage() );
					$params->resp->is_delete = true;
				}
			} else {
				$params->resp->next         = 'SCP';
				$params->resp->payment_data = array( 'client_secret' => $params->payment_item['client_secret'] );
			}
		} else {
			$params->resp->is_delete = true;
			POS_Settings::get_module_instance()->add_error( 'Stripe configuration error in server' );
		}
		return $params;

	}

	/**
	 * The complete order is generated by appsbd
	 *
	 * @param POS_Payment $pos_payment Its pos_payment param.
	 * @param array       $payment_list Its payment_list param.
	 * @param bool        $payment_status_ok Its payment_status_ok param.
	 *
	 * @return mixed|void
	 */
	public function complete_order( &$pos_payment, &$payment_list, &$payment_status_ok ) {
		$transaction_id = $pos_payment->get_payload( 'transaction_id' );
		vitepos_wc_update_meta( $pos_payment->order, '_vt_stp_trans_id', $transaction_id );
		foreach ( $payment_list as &$pt ) {
			if ( 'T' == $pt['type'] ) {
				if ( ! empty( $pt['cm'] ) && 'manual' == $pt['cm'] ) {
					if ( $this->capture_payment_intent( $transaction_id ) ) {
						$pt['is_paid'] = 'Y';
					} else {
						$order_details = POS_Order::get_from_woo_order_details_by_id( $pos_payment->order->get_id() );
						$pos_payment->set_order_details( false, $order_details, 'RT' );
						$payment_status_ok = false;
					};
				} else {
					$pt['is_paid'] = 'Y';
				}
			}
		}

	}

	/**
	 * The capture payment intent is generated by appsbd
	 *
	 * @param string $intend_id Its stripe intend id.
	 *
	 * @return bool
	 */
	protected function capture_payment_intent( $intend_id ) {
		$stripe_settings = $this->admin_data;
		if ( ! empty( $stripe_settings ) && ! empty( $stripe_settings->settings['secret_key'] ) ) {
			if ( ! empty( $intend_id ) ) {
				$stripe_secret_key = '' . $stripe_settings->settings['secret_key'];
				try {
					$stripe = new \Stripe\StripeClient( $stripe_secret_key );
					$resp   = $stripe->{'paymentIntents'}->capture( $intend_id, array() );
					if ( ! empty( $resp->status ) && 'succeeded' == $resp->status ) {
						return true;
					}
				} catch ( \Stripe\Exception\ApiErrorException $e ) {
					POS_Settings::get_module_instance()->add_error( $e->getMessage() );
					return false;
				} catch ( \Error $e ) {
					POS_Settings::get_module_instance()->add_error( $e->getMessage() );
					return false;
				} catch ( \Exception $e ) {
					POS_Settings::get_module_instance()->add_error( $e->getMessage() );
					return false;
				}
			} else {
				POS_Settings::get_module_instance()->add_error( 'Empty intend id' );
				return false;
			}
		}
		return false;
	}

	/**
	 * The set admin settings is generated by appsbd
	 *
	 * @return mixed|void
	 */
	public function set_admin_settings() {
		$this->set_admin_title_desc(
			'Enable %{brand} Payment',
			'It will allow you to take payment using %{brand} Payment gateway, make sure you have added %{brand} api info in %{brand} settings tab.',
			array( 'brand' => 'Stripe' )
		);
		$this->set_tab_title( 'Stripe Settings', 'vps vps-cc-stripe' );

		$stripe_settings_card = $this->add_admin_card( 'settings', 'Stripe' );
		$stripe_settings_card->add_settings_field( 'Publishable key', 'pub_key', true );
		$stripe_settings_card->add_settings_field( 'Secret Key', 'secret_key', true );

		$stripe_settings_card->add_settings_field(
			'Capture Method',
			'capture_method',
			true,
			'R',
			array(
				'O' => 'Capture on order complete',
				'P' => 'Auto capture on payment auth',
			)
		);
	}

}
